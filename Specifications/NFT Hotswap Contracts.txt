///  Premise ///
An NFT liquidity protocol based on CF/CP 

/// General ///
The System is made up of (3) contracts; NFT Hotswap Factory, NFT Hotswap Controller, and NFT Hotswap Liquidity. 

/// Hotswap Liquidity ///
This contract holds [NFT] items and [FFT] units for the listed tokens, allows an owner/controller to withdraw tokens from it, thereby enabling swaps. 
The controller can transfer ownership, thereby allowing the existing controller to be updated. Controllers are owned by the hotswap factory, both controllers and liquidity contracts are created by the factory.  

Functions; 

- withdraw ; used by the owner/controller to move [FFT] or [NFT] out of the Liquidity contract to a recipient. 

- FFT ; returns the stored FFT contract address. 

- NFT ; returns the stored NFT contract address. 


/// Hotswap Controller ///
This contract lets users pair NFTs and FFTs (Float-enabled fungible tokens) using CF/CP. The NFT collection and FFT token are set as constructor arguments. 
Swaps are instant and exchange a stated amount of NFT for a determined amount of FFT. That is; the user specifies how many NFT items they want to buy or sell, the hotswap then determines how much it would cost or yield then executes the swap.

Price is derived by pairing, this uses CF/CP to determine the relative amounts of two tokens in the liquidity contract, with provision for delta on sells. 

Example; if there are 1000 units of [FFT] and 10 items of [NFT], then the hotswap calculates; 1000 / 10 =  100, which means 100 [FFT] is equal to 1 [NFT]. 

If buys are concerned the hotswap determines a price then deducts [FFT] from the caller's address and sends them [NFT] items from itself at the determined price. 

With sells the hotswap determines the price post impact then deducts a stated number of NFT items from the caller's address and sends them [FFT] units at the post impact price [See E4 & E5].

The formula for impact price is as follows; 

NFT swap amount * price = FFT output 
FFT Liquidity - FFT output = FFT impact 
NFT Liquidity + NFT swap amount = NFT impact 
FFT impact / NFT impact = impact price 

NFT Items need to be queried differently from FFT units, when a transfer involving NFTs is concerned the hotswap queries the listed NFT contract for the target address's items, then concurrently creates multiple 'safeTransferFrom' transactions for each item the user owns up to the number stated, this happens within the same transaction. If the user does not have up to the number they stated the transaction fails. 

Users cannot trade in fractions of an NFT because NFTs have no decimals. 

The listed [FFT] and [NFT] are stored in balances of x and y. When a swap occurs or specific liquidity is added this updates said balances, any amount of [FFT] not in y balance is automatically added to the fee storage. 

Hotswap takes fees at 0.05% per swap, fees have a specific storage. 1/5 of all fees are immediatly sent to a "collector" address, while the rest is added to the fee storage and held within the hotswap.

Current price is stored and queryable.  

Liquidity can be added, yielding fees for the depositor. 

Contract is ownable.

Swap determines price, withdraws stated number of tokens or NFTs, then pays out settlement based on price.

User cannot trade >51% of the available liquidity within one transaction. 

Functions ;

- getPrice ;
Calculates and stores a price. Is triggered within a swap transaction before and after settlement. 

- price ;
Returns the latest price, updated after every swap. 

- swapNFT ; 
Executes a transaction to swap a stated number of NFT items at the determined price in exchange for FFT units (Sell). Requires "minOutput" field to determine the minimum amount the contract is allowed to pay out, if the payout amount is equal to or greater than the stated minOutput then the transaction goes through [See E1].

- swapFFT ;
Similar to "swapNFT" but states a number of NFT items to acquire from the contract in exchange for FFT units that the caller owns (Buy). Requires "maxInput" field to determine the maximum amount the contract is allowed to take, if the expected "take" is equal to or lesser than the stated maxInput then the transaction goes through [See E2].

- setCollector ;
Determines where collector fees are sent to (ownerOnly). 

- collector ;
Returns the collector address. 

- depositNFT ;
Creates a liquidity slot entry for the address and deposits the stated number of NFTs.

- depositFFT ;
Creates a liquidity slot entry for the address and deposits the stated number of FFT.
 
When "deposit" is called the contract gets the ratios for the liquidity slot using the following formula;

FFT deposit / impact FFT amount = FFT ratio

NFT deposit / impact NFT amount = NFT ratio

"impact Amount" is how much FFT or NFT will be in the contract after the function executes. 

Example; if there's "0" and the user is depositing 500, the impact amount is 500.


- claimFees ;
Claims fees on a target liquidity slot owned by the caller. Uses the following formula; 

tVolume - dVolume = cVolume 

cVolume / 100 * 0.04 = fees accrued 

NFT or FFT Alloc (selects based on deposit type) / Total FFT or NFT Liquidity (selects based on deposit type) = Liquidity contribution 

fees accrued * liquidity contribution = output amount

Output amount cannot be greater than available fees, if greater then only pay available fees. 

- withdraw ;
Withdraws either NFT or FFT based on how much the caller is owed.
When the user calls "withdrawLiquidity" the contract calculates the following before paying out; 

Current FFT Liquidity * FFT ratio = output amount

Current NFT Liquidity * NFT ratio = output amount

The amount a Liquidity provider is entitled to withdraw cannot be greater than the amount they initially deposited. If the output is greater it will default to their deposited amount instead. 

- liquidityAddress; 
Set during deployment by the factory, determines where NFT items and FFT units are withdrawn / deposited to for swap or liquidity functions. 

! Liquidity Slots !
Each controller has storages for liquidity, these manage allocations of [NFT] and [FFT] stored under 'xLiquid' and 'yLiquid', users can add to these balances by using function 'depositNFT' and 'depositFFT'. Each time a user deposits; their details get written to 1/10000 'liquidity slots', each liquidity slot holds the following details;

depositor : (address)
FFT Ratio : (uint256)
NFT Ratio : (unit256)
dVolume : (unit256)
xAllocation : (uint256)
yAllocation : (uint256)
claimed : (bool)
index : (uint256)

"NFT Ratio" stores how much of the pool's NFT balance the depositor is entitled to. 

"FFT Ratio" stores how much of the pool's FFT balance the depositor is entitled to.

"dVolume" stores the tVolume value at the time the deposit was made and is necessary for claiming fees. 

"Allocations" show how much was originally deposited by the address, this is necessary for calculating how much they are owed once they attempt to withdraw. 

The "claimed" field is used to indicate if a user has claimed their fees or not, once set to "true" they can no longer claim, they can only withdraw their liquidity. 
If a user does not claim before withdrawing, then their fees are forfeit. 

The controller stores additional details such as; 

xLiquid : (uint256)
yLiquid : (uint256) 
Fees : (uint256)
tVolume : (uint256)

"xLiquid" stores how much [NFT] is in the contract and can be used to settle sell swaps.

"yLiquid" stores how much [FFT] is in the contract and can be used to settle buy swaps. 

"Fees" stores how much [FFT] has been taken from fees, this segregates the yLiquid from fees [See E6].
 
"tVolume" indicates how much volume in FFT has been done by the listing contract, is updated after every buy/sell. This amount is acquired by the following formula; 

FFT amount swapped + current volume = new volume

"tVolume" is also important to the function 'claimFees'. 

Fees are deducted upon each transaction, altering the FFT payout or initial swap principal and diverting the deducted amount into the token's "fees" balance [See E3].

Functions;
- queryLiquidbyIndex ; returns the details of a liquidity slot based on the total index. 

- queryLiquidbyDepositor ; returns the details of a Liquidity slot based on the depositor, requires index number and address.

- queryLiquid; requires "isFFT" (bool), returns the amount of [NFT] or [FFT] currently in x or y Liquid. 

- queryPositions; requires "address", returns the liquidity slot numbers for a particular address. 

- queryPositionbyIndex; requires a number, returns the full details of a liquidity slot, i.e the amount of [FFT] and [NFT] in the slot, who owns the slot, fees owed etc. 

- queryLiquidity; returns the full Liquidity contract details excluding Liquidity slots. 

! NFT Hotswap factory ! 
Deploys new hotswap controllers and hotswap LP contracts, this uses a stated ERC-20 address and ERC-721 address provided by the deployer. Fee collector is predefined into each controller/LP but can be changed by the owner, all deployed hotswaps are owned by the factory, can push transaction to change collector address on a hotswap or transfer ownership of a liquidity contract to a new controller. 

Functions ; 
- deployHotswap
Requires ERC-20 and ERC-721 addresses, creates new hotswap controller and LP. Charges "payable" of (0.001) MATIC which is sent to the collector address. Verifies the controller and liquidity contracts on Etherscan [See L1]. 

- setCollector 
Changes the collector address on a hotswap controller.  

- setController
Changes the controller for a liquidity address, thereby updating it. 

- setFactory
Changes the ownership of a controller and LP address. 

- transferOwnership ; 
Transfers ownership of the contract to a target address.

- setDefaultCollector ;
Determines the collector address set into controllers by default, also determines where LP creation fees are sent. 
Initial default collector is the hotswap factory deployer. 

/// Examples /// 
E1 : User attempts to buy 2 NFT with a price of 100 FFT, the contract will estimate the cost to be 200.1 with fees added. If they specify 200.1 or more in the "maxInput" field the transaction will go through. However, if price should increase to 120 right before they execute their transaction the expected cost rises to 240, the contract will be unable to withdraw the required amount for the swap because the user has not allowed enough. In this same scenario if they were to state 250 in maxInput, this would be a slippage tolerance of 50%, meaning they are willing to absorb up to 50% price increases that occur before the transaction is executed.

maxInput protects the user from sudden increases in price when buying that could potentially lead to losses, any decreases in price while buying are welcome.  

E2 : Similar to 'E1' With 'minOutput' the story is similar, the user limits any downward changes in price before execution occurs, if the price was 100 and they were expecting at least 199.9 (fees excluded), but price were to reduce to 80, the determined output would be 159.9, thus their minOutput was too high. 
 
minOutput protects the user from sudden decreases in price (when selling) that could potentially lead to losses. Any increases in price while selling are welcome. 

E3 : if a user attempted to buy 10 [NFT] at a price of (2); liquidity fees will result in them being charged 20 FFT for the swap and; 20 * 100 / 0.05 = 0.01 as fees, so 20.01 FFT in total while settling them 10 [NFT]. Of the fees collected 0.002 is sent to the collector while 0.008 is held within the fees storage. 

If the user was selling rather than being settled 20 FFT they are instead settled 19.99 FFT while the rest goes to fess same as the previous paragraph. 

E4 : a buy swap is made for an NFT, At the time the swap is made the price is 5 [FFT], the user's order is accepted at 5 [FFT]. Their order increases the price by 1%. 

With the price now at 5.05 [FFT] when the user attempts to sell; their swap is accepted but the price and output amount are not yet determined. When the swap is triggered the LP adds/subtracts whatever amount is being exchanged to/from the x and y liquid, thereby getting the post impact price i.e the price *after* the swap occurs. 

Then finally paying out the final settlement amount to the seller. 

Meaning the price the exchange fetches would actually be 5 [FFT] and not 5.05.
This means the buyer makes no profit from trading with themselves and in fact loses due to fees. 

E5 : same as E4 but after the first user buys; any number of users then also buy the NFT, driving the price up by 10%, now the price is 5.55 [FFT]. When the user attempts to sell; the price they sell at is 5.4945 [FFT] due to impact/delta. Thus they made profit at the expense of the other buyer(s). 

E6 : when a swap is triggered the contract fetches the amounts of FFT and NFT, if there is 1000 FFT in the contract it first subtracts the amount stored as fees, if fees are 1.5 FFT then the total available for swaps is; 998.5 FFT. 

Likewise if the user triggered a deposit or withdrawal, the total FFT Liquidity is subtracted by fees. 

/// Links ///
L1 : https://ethereum.stackexchange.com/questions/27991/how-do-you-verify-a-contract-on-etherscan-that-is-deployed-by-another-contract/109636#109636

https://ethereum.stackexchange.com/questions/2161/factory-contract-that-can-verify-its-children

https://ethereum.stackexchange.com/questions/132695/factory-implementation-etherscan-verification

https://ethereum.stackexchange.com/questions/131588/how-can-i-verify-a-smart-contract-generated-by-another-smart-contract-with-some

/// Notes ///
- Initial collector will be a personal multi-sig, but will be changed to MarkerDAO later on. 
